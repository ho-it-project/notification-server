/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import { Fetcher } from "@nestia/fetcher";
import type { IConnection, Primitive } from "@nestia/fetcher";
import typia from "typia";
import type { TestBody2 } from "./../../types/index";
export * as string from "./string";
export * as number from "./number";
/**
 * @controller AppController.getHello()
 * @path GET /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function getHello(connection: IConnection): Promise<getHello.Output>;
export declare namespace getHello {
    type Output = Primitive<string>;
    const METHOD: "GET";
    const PATH: string;
    const ENCRYPTED: Fetcher.IEncrypted;
    const path: () => string;
    const random: (g?: Partial<typia.IRandomGenerator>) => Output;
    const simulate: (connection: IConnection) => Promise<Output>;
}
/**
 * @controller AppController.postHello()
 * @path POST /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function postHello(connection: IConnection, body: postHello.Input): Promise<postHello.Output>;
export declare namespace postHello {
    type Input = Primitive<TestBody2>;
    type Output = Primitive<TestBody2>;
    const METHOD: "POST";
    const PATH: string;
    const ENCRYPTED: Fetcher.IEncrypted;
    const path: () => string;
    const random: (g?: Partial<typia.IRandomGenerator>) => Output;
    const simulate: (connection: IConnection, body: postHello.Input) => Promise<Output>;
}
